/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

#define BASE 0
#define NAV 1
#define SYM 2
#define NUM 3
#define FUNC 4
#define ADJUST 5
#define LOWER 6

#define TAPPING_TERM_MS 300
#define TAPPING_TERM_MS_FAST 200

/*
 * Layer Tap Settings
 */
&lt {
    // Increase layer tap time
    tapping-term-ms = <TAPPING_TERM_MS>;

    // Quickly tap-tap-holding the lt button will repeat the tap behavior
    // For example enter-enter-hold, will output multiple enter while you
    // keep holding the key.
    // But holding enter without double tapping, will activate the layer.
    quick_tap_ms = <200>;
};

/*
 * Caps Word Settings
 */
&caps_word {
    // Allow caps word to continue even when minus or underscore
    // are pressed.
    // Also prevent mod presses from cancelling caps word.
    continue-list = <
      UNDERSCORE MINUS
      LCTRL LALT LGUI LSHFT
      RCTRL RALT RGUI RSHFT
      BACKSPACE
    >;
};

/ {

  /*
   * Conditional Layers
   */

  conditional_layers {
      compatible = "zmk,conditional-layers";
      func_layer {
          if-layers = <SYM NUM>;
          then-layer = <FUNC>;
      };

      // Both Hands
      adjust_layer_1 {
          if-layers = <NAV NUM>;
          then-layer = <ADJUST>;
      };

      // Left Hand Only
      adjust_layer_2 {
          if-layers = <SYM NAV>;
          then-layer = <ADJUST>;
      };
  };

  behaviors {

    /*
     * Homerow Mods
     *
     * Usage: &hm LSHFT T
     * Tap: T
     * Tap-Tap-Hold: Repeat T
     * Hold: LSHIFT
     */

    // Homerow mods that work on all keys
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <TAPPING_TERM_MS>;
      quick_tap_ms = <200>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };


    // Homerow mods with lower tapping term for shift
    hm_fast: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS_FAST";
      #binding-cells = <2>;
      tapping-term-ms = <TAPPING_TERM_MS_FAST>;
      quick_tap_ms = <200>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };

    // Positional Homerow mods
    // Homerow mods that prevent accidental activations when rolling keys,
    // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
    // qwerty.
    //
    // Works by only allowing a mod to activate within tapping-term if it's
    // on the opposite side of the keyboard or on the same side thumb keys.
    hm_l: homerow_mods_left {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS_LEFT";
      #binding-cells = <2>;
      tapping-term-ms = <TAPPING_TERM_MS>;
      quick_tap_ms = <200>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <
        6   7   8   9   10  11
        18  19  20  21  22  23
        30  31  32  33  34  35
        43  44  45  46  47  48  49
                50  51  52  53  54
                55  56  57  58  59
      >;
    };

    hm_r: homerow_mods_right {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS_RIGHT";
      #binding-cells = <2>;
      tapping-term-ms = <TAPPING_TERM_MS>;
      quick_tap_ms = <200>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <
        0   1   2   3   4   5
        12  13  14  15  16  17
        24  25  26  27  28  29
        36  37  38  39  40  41  42
                50  51  52  53  54
                55  56  57  58  59
      >;
    };

    // Fast Positional Homerow mods
    hm_fast_l: homerow_mods_left {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS_FAST_LEFT";
      #binding-cells = <2>;
      tapping-term-ms = <TAPPING_TERM_MS_FAST>;
      quick_tap_ms = <200>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <
        6   7   8   9   10  11
        18  19  20  21  22  23
        30  31  32  33  34  35
        43  44  45  46  47  48  49
                50  51  52  53  54
                55  56  57  58  59
      >;
    };

    hm_fast_r: homerow_mods_right {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS_FAST_RIGHT";
      #binding-cells = <2>;
      tapping-term-ms = <TAPPING_TERM_MS_FAST>;
      quick_tap_ms = <200>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <
        0   1   2   3   4   5
        12  13  14  15  16  17
        24  25  26  27  28  29
        36  37  38  39  40  41  42
                50  51  52  53  54
                55  56  57  58  59
      >;
    };

    /*
     * Auto Mod
     *
     * Usage: &am RPAR LPAR
     * Hold: )
     * Tap: (
     *
     * --
     *
     * Auto Shift
     *
     * Usage: AS(A)
     * Hold: A (shifted 'a')
     * Tap: a
     */

    am: auto_mod {
      compatible = "zmk,behavior-hold-tap";
      label = "AUTO_MOD";
      #binding-cells = <2>;
      tapping_term_ms = <300>;
      quick_tap_ms = <0>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
    #define AM(hold_keycode, tap_keytcode) &am hold_keycode tap_keycode
    #define AS(keycode) &am LS(keycode) keycode

    /*
     * Tap dancing shift
     *
     * Usage: &td_shift
     * Hold: Shift
     * Double Tap: Caps Word
     * Triple Tap: Caps Lock
     */

    td_shift: tap_dance_0 {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_SHIFT";
        #binding-cells = <0>;
        tapping-term-ms = <TAPPING_TERM_MS>;
        bindings = <&kp RIGHT_SHIFT>, <&caps_word>, <&kp CAPSLOCK>;
    };

    /*
     * Shifted Backspace deletes
     *
     * Usage: &mm_bspc_del
     * Tap: Backspace
     * Shift-Tap: Delete
     */
    mm_bspc_del: bspc_del {
        compatible = "zmk,behavior-mod-morph";
        label = "BACKSPACE_DELETE";
        #binding-cells = <0>;
        bindings = <&kp BSPC>, <&kp DEL>;
        mods = <(MOD_LSFT|MOD_RSFT)>;

        // Requires forked zmk that supports this feature
        // https://github.com/zmkfirmware/zmk/pull/1114
        //
        // Ensures that when pressing Shift-Delete only delete is sent
        // and not Shift-Delete
        masked_mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    /*
     * Shifted Backspace deletes + Layer Tap
     *
     * Usage: &mm_bspc_del_layer
     * Tap: Backspace
     * Shift-Tap: Delete
     * Hold: Switch layer
     */
    mm_bspc_del_layer: bspc_del_layer {
        compatible = "zmk,behavior-mod-morph";
        label = "BACKSPACE_DELETE_LAYER";
        #binding-cells = <0>;
        bindings = <&lt NUM BSPC>, <&kp DEL>;
        mods = <(MOD_LSFT|MOD_RSFT)>;

        // Requires forked zmk that supports this feature
        // https://github.com/zmkfirmware/zmk/pull/1114
        //
        // Ensures that when pressing Shift-Delete only delete is sent
        // and not Shift-Delete
        masked_mods = <(MOD_LSFT|MOD_RSFT)>;
    };


    /*
     * Grave Escape
     *
     * Usage: &mm_spc_unds_layer
     * Tap: Escape
     * LShift-Tap: `
     * RShift-Tap: ~
     */
     grescm: grave_escape_masked {
         compatible = "zmk,behavior-mod-morph";
         label = "GRESC";
         #binding-cells = <0>;
         bindings = <&kp ESCAPE>, <&kp GRAVE>;
         mods = <(MOD_LSFT|MOD_RSFT)>;

        // Requires forked zmk that supports this feature
        // https://github.com/zmkfirmware/zmk/pull/1114
         masked_mods = <(MOD_LSFT)>;
     };

    /*
     * Grave Escape + GUI
     *
     * Usage: &grescm_gui
     * Tap: Escape
     * LShift-Tap: `
     * RShift-Tap: ~
     * Hold: GUI
     */
     grescm_gui: grave_escape_masked_gui {
         compatible = "zmk,behavior-mod-morph";
         label = "GRESC_GUI";
         #binding-cells = <0>;
         bindings = <&hm LGUI ESCAPE>, <&kp GRAVE>;
         mods = <(MOD_LSFT|MOD_RSFT)>;

        // Requires forked zmk that supports this feature
        // https://github.com/zmkfirmware/zmk/pull/1114
         masked_mods = <(MOD_LSFT)>;
     };

    /*
     * Round Bracket
     *
     * Usage: &mm_bracket_r
     * Tap: (
     * Shift-Tap: )
     * Hold: )
     */
     mm_bracket_r: mm_bracket_r {
         compatible = "zmk,behavior-mod-morph";
         label = "()";
         #binding-cells = <0>;
         bindings = <&am RPAR LPAR>, <&kp RPAR>;
         mods = <(MOD_LSFT|MOD_RSFT)>;
     };

    /*
     * Square Bracket
     *
     * Usage: &mm_bracket_sq
     * Tap: [
     * Shift-Tap: ]
     * Hold: ]
     */
     mm_bracket_sq: mm_bracket_sq {
         compatible = "zmk,behavior-mod-morph";
         label = "[]";
         #binding-cells = <0>;
         bindings = <&am RBKT LBKT>, <&kp RBKT>;
         mods = <(MOD_LSFT|MOD_RSFT)>;

        // Requires forked zmk that supports this feature
        // https://github.com/zmkfirmware/zmk/pull/1114
         masked_mods = <(MOD_LSFT|MOD_RSFT)>;
     };

    /*
     * Curly Bracket
     *
     * Usage: &mm_bracket_c
     * Tap: {
     * Shift-Tap: }
     * Hold: }
     */
     mm_bracket_c: mm_bracket_c {
         compatible = "zmk,behavior-mod-morph";
         label = "{}";
         #binding-cells = <0>;
         bindings = <&am RBRC LBRC>, <&kp RBRC>;
         mods = <(MOD_LSFT|MOD_RSFT)>;
     };

  };

  /*
   * Keymap generated using https://www.keymapper.dev/
   * Import sofle_choc_keymap.json to view it.
/ {
combo_brc {
timeout-ms = <50>;
key-positions = <13 14>;
bindings = <&macro_brc>;
};

macro_brc: macro_brc {
compatible = "zmk,behavior-macro";
label = "macro_brc";
#binding-cells = <0>;
bindings = <&kp LBRC>, <&kp RBRC>, <&kp LEFT>;
};
    combos {
        compatible = "zmk,combos";
        combo_n {
            timeout-ms = <50>;
            key-positions = <46 47>;
            bindings = <&kp N>;
        };
    };
};
/ {

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   | BKSPC |
// |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |  |   |
// |  LAG1 |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE |  |       |     |  N   |  M    |  ,   |   .   | / |
//               | ALT | CTRL  | MO | SPACE | LCTL  |  | ENTER | SPACE | LAG1  | DEL   | GUI  |
            bindings = <
&kp ESC &kp N1 &kp N2   &kp N3   &kp N4    &kp N5                      &kp N6 &kp N7    &kp N8    &kp N9   &kp N0   &kp BSPC
&kp TAB  &kp Q  &kp W    &kp E    &kp R    &kp T                       &kp Y  &kp U     &kp I     &kp O    &kp P    &kp BSLH
&kp LANGUAGE_1  &kp A   &kp S    &kp D     &kp F     &kp G            &kp H  &kp J     &kp K     &kp L    &kp SEMI &kp SQT
&kp LSHFT &kp Z  &kp X    &kp C    &kp V   &kp B  &kp C_MUTE    &none &kp N &kp N &kp M   &kp COMMA &kp DOT &kp FSLH
                 &kp LALT &kp LCTRL &mo 1 &kp SPACE &kp LCTRL   &kp ENTER &mt ENTER SPACE  &kp LANGUAGE_1 &kp DEL  &kp LGUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_UP PG_DN>;
        };

        lower_layer {
// ------------------------------------------------------------------------------------------------------------
// |  ~    |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
// | RGB on/off  |  1  |   2 |   3  |   4  |   5  |                   |   6  |   7   |   UP   |   9  |    0  |  F12  |
// | RGB change | Mute | PRV | PlAY | NEXT  |  %   |                 |  Home  |  LEFT  |  DOWN   |  RIGHT  | END  |  PgUP  |
// | SHIFT |  +  |  =  |  *   |    _   |  -   |    |   |  |[ | ] | { | } | SRCH |   PgDn |
//             | BT | | OSL(0)|  |    | PASTE |      | COPY |RFRSH| UNDO | SCR-  | SCR+  |      
            bindings = <
&kp TILDE   &kp F1    &kp F2    &kp F3      &kp F4    &kp F5                                 &kp F6    &kp F7    &kp F8        &kp F9    &kp F10   &kp F11
&none &kp N1    &kp N2    &kp N3      &kp N4    &kp N5                                 &kp N6    &kp N7    &kp UP        &kp N9    &kp N0    &kp F12
&none &kp C_MUTE  &kp C_PREV    &kp C_PP    &kp C_NEXT  &kp PRCNT                      &kp HOME  &kp LEFT  &kp DOWN      &kp RIGHT &kp END  &kp PG_UP
&kp LSHFT &kp KP_PLUS &kp EQUAL  &kp KP_MULTIPLY &kp UNDER &kp KP_MINUS &none     &none  &kp LBKT  &mt RBKT  LBKT &kp LBRC  &kp RBRC  &kp C_AC_SEARCH  &kp PG_DN
            &none &none  &tog 1 &none &kp C_AC_PASTE                         &kp K_COPY &kp C_AC_REFRESH  &kp C_AC_UNDO      &kp C_BRI_DN     &kp C_BRI_UP
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        
    };
};

